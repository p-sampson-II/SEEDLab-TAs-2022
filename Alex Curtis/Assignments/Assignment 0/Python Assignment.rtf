{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 \up0 \nosupersub \ulnone Alex Curtis\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Hello, World!\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 print("Hello, World!\'94)\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Variables and Types\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 # change this code\
mystring = "hello"\
myfloat = 10.0\
myint = 20\
\
# testing code\
if mystring == "hello":\
    print("String: %s" % mystring)\
if isinstance(myfloat, float) and myfloat == 10.0:\
    print("Float: %f" % myfloat)\
if isinstance(myint, int) and myint == 20:\
    print("Integer: %d" % myint)\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Lists
\f0\b0 \
numbers = []\
strings = []\
names = ["John", "Eric", "Jessica"]\
\
# write your code here\
second_name = names[1]\
numbers.append(1)\
numbers.append(2)\
numbers.append(3)\
strings.append("hello")\
strings.append("world")\
\
# this code should write out the filled arrays and the second name in the names list (Eric).\
print(numbers)\
print(strings)\
print("The second name on the names list is %s" % second_name)\
\

\f1\b Basic Operators\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 x = object()\
y = object()\
\
# TODO: change this code\
x_list = [x]*10\
y_list = [y]*10\
big_list = x_list + y_list\
\
print("x_list contains %d objects" % len(x_list))\
print("y_list contains %d objects" % len(y_list))\
print("big_list contains %d objects" % len(big_list))\
\
# testing code\
if x_list.count(x) == 10 and y_list.count(y) == 10:\
    print("Almost there...")\
if big_list.count(x) == 10 and big_list.count(y) == 10:\
    print(\'93Great!")\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 String Formatting
\f0\b0 \
data = ("John", "Doe", 53.44)\
format_string = "Hello %s %s. Your current balance is $%s."\
\
print(format_string % data)\
\

\f1\b Basic String Operations\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 s = "Strings are awesome!"\
# Length should be 20\
print("Length of s = %d" % len(s))\
\
# First occurrence of "a" should be at index 8\
print("The first occurrence of the letter a = %d" % s.index("a"))\
\
# Number of a's should be 2\
print("a occurs %d times" % s.count("a"))\
\
# Slicing the string into bits\
print("The first five characters are '%s'" % s[:5]) # Start to 5\
print("The next five characters are '%s'" % s[5:10]) # 5 to 10\
print("The thirteenth character is '%s'" % s[12]) # Just number 12\
print("The characters with odd index are '%s'" %s[1::2]) #(0-based indexing)\
print("The last five characters are '%s'" % s[-5:]) # 5th-from-last to end\
\
# Convert everything to uppercase\
print("String in uppercase: %s" % s.upper())\
\
# Convert everything to lowercase\
print("String in lowercase: %s" % s.lower())\
\
# Check how a string starts\
if s.startswith("Str"):\
    print("String starts with 'Str'. Good!")\
\
# Check how a string ends\
if s.endswith("ome!"):\
    print("String ends with 'ome!'. Good!")\
\
# Split the string into three separate strings,\
# each containing only a word\
print("Split the words of the string: %s" % s.split(" \'93))\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Conditions\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 # change this code\
number = 20\
second_number = 0\
first_array = [1,4,5]\
second_array = [1,2]\
\
if number > 15:\
    print("1")\
\
if first_array:\
    print("2")\
\
if len(second_array) == 2:\
    print("3")\
\
if len(first_array) + len(second_array) == 5:\
    print("4")\
\
if first_array and first_array[0] == 1:\
    print("5")\
\
if not second_number:\
    print(\'936")\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Loops\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 numbers = [\
    951, 402, 984, 651, 360, 69, 408, 319, 601, 485, 980, 507, 725, 547, 544,\
    615, 83, 165, 141, 501, 263, 617, 865, 575, 219, 390, 984, 592, 236, 105, 942, 941,\
    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,\
    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,\
    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,\
    958, 609, 842, 451, 688, 753, 854, 685, 93, 857, 440, 380, 126, 721, 328, 753, 470,\
    743, 527\
]\
\
for number in numbers:\
    if number % 2 == 0:\
        print(number)\
    if number == 237:\
        break\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Functions\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 # Modify this function to return a list of strings as defined above\
def list_benefits():\
    return ["More organized code", "More readable code", "Easier code reuse", "Allowing programmers to share and connect code together"]\
    pass\
\
# Modify this function to concatenate to each benefit - " is a benefit of functions!"\
def build_sentence(benefit):\
    return benefit + " is a benefit of functions!"\
    pass\
\
def name_the_benefits_of_functions():\
    list_of_benefits = list_benefits()\
    for benefit in list_of_benefits:\
        print(build_sentence(benefit))\
\
name_the_benefits_of_functions()\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Classes and Objects
\f0\b0 \
# define the Vehicle class\
class Vehicle:\
    name = ""\
    kind = "car"\
    color = ""\
    value = 100.00\
    def description(self):\
        desc_str = "%s is a %s %s worth $%.2f." % (self.name, self.color, self.kind, self.value)\
        return desc_str\
# your code goes here\
car1 = Vehicle()\
car2 = Vehicle()\
car1.name = 'Fer'\
car1.color = 'red'\
car1.kind = 'convertible'\
car1.value = 60000.00\
car2.name = 'Jump'\
car2.color = 'blue'\
car2.kind = 'van'\
car2.value = 10000.00\
# test code\
print(car1.description())\
print(car2.description())\
\

\f1\b Dictionaries\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 phonebook = \{  \
    "John" : 938477566,\
    "Jack" : 938377264,\
    "Jill" : 947662781\
\}  \
# your code goes here\
phonebook["Jake"] = 938273443\
phonebook.pop("Jill")\
# testing code\
if "Jake" in phonebook:  \
    print("Jake is listed in the phonebook.")\
    \
if "Jill" not in phonebook:      \
    print("Jill is not listed in the phonebook.")  \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 Modules and Packages\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 import re\
\
# Your code goes here\
find_members = []\
for function in dir(re):\
    if "find" in function:\
        find_members.append(function)\
print(find_members)}